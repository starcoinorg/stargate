module VecTest{
    import 0x0.Vector;
    import 0x0.ChannelAccount;

    resource VecBox {
        grid: Vector.T<bool>,
    }

    public test_move_vec_to_sender() {
        let t: Self.VecBox;
        let grid: Vector.T<bool>;

        grid = Vector.empty<bool>();

        t = VecBox {
            grid: move(grid),
        };

        ChannelAccount.native_move_to_channel<Self.VecBox>(move(t), true);

        return;
    }

    public test_move_vec_from_sender() {
        let t: Self.VecBox;
        let grid: Vector.T<bool>;

        t = ChannelAccount.native_move_from_channel<Self.VecBox>(true);
        VecBox{ grid } = move(t);
        Vector.destroy_empty<bool>(move(grid));
        return;
    }

    public test_move_vec_to_receiver() {
        let t: Self.VecBox;
        let grid: Vector.T<bool>;

        grid = Vector.empty<bool>();

        t = VecBox {
            grid: move(grid),
        };

        ChannelAccount.native_move_to_channel<Self.VecBox>(move(t), false);

        return;
    }

    public test_move_vec_from_receiver() {
        let t: Self.VecBox;
        let grid: Vector.T<bool>;
        assert(ChannelAccount.native_exist_channel<Self.VecBox>(false), 44);
        t = ChannelAccount.native_move_from_channel<Self.VecBox>(false);
        VecBox{ grid } = move(t);
        Vector.destroy_empty<bool>(move(grid));
        return;
    }
}