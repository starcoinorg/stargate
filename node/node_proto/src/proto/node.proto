syntax = "proto3";

package node;

import "script_package.proto";
import "transaction.proto";
import "get_with_proof.proto";

service Node {
    rpc OpenChannel(OpenChannelRequest) returns (OpenChannelResponse) {}
  
    rpc Pay(PayRequest) returns (PayResponse) {}

    rpc Deposit(DepositRequest) returns (DepositResponse) {}

    rpc Withdraw(WithdrawRequest) returns (WithdrawResponse) {}

    rpc ChannelBalance(ChannelBalanceRequest) returns (ChannelBalanceResponse) {}

    rpc InstallChannelScriptPackage(InstallChannelScriptPackageRequest) returns (InstallChannelScriptPackageResponse) {}

    rpc DeployModule(DeployModuleRequest) returns (DeployModuleResponse){}

    rpc ExecuteScript(ExecuteScriptRequest) returns (ExecuteScriptResponse) {}
}
  
message OpenChannelRequest {
    bytes remote_addr=1;
    uint64 local_amount=2;
    uint64 remote_amount=3;
}

message OpenChannelResponse {

}

message DepositRequest {
    bytes remote_addr=1;
    uint64 local_amount=2;
    uint64 remote_amount=3;
}

message DepositResponse {

}

message WithdrawRequest {
    bytes remote_addr=1;
    uint64 local_amount=2;
    uint64 remote_amount=3;
}

message WithdrawResponse {

}

message PayRequest {
    bytes remote_addr=1;
    uint64 amount=2;
}

message PayResponse {

}

message ChannelBalanceRequest{
    bytes remote_addr=1;
}

message ChannelBalanceResponse{
        uint64 balance=1;        
}

message InstallChannelScriptPackageRequest{
    sgtypes.ChannelScriptPackage channel_script_package=1;
}

message InstallChannelScriptPackageResponse{

}

message DeployModuleRequest{
    bytes module_bytes=1;
}

message DeployModuleResponse{
    types.SignedTransactionWithProof transaction_with_proof = 1;
}

message ExecuteScriptRequest{
    bytes remote_addr=1;
    string package_name=2;
    string script_name=3;
    repeated bytes args=4;
}

message ExecuteScriptResponse{
    uint64 channel_sequence_number = 1;
}