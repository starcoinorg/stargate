syntax = "proto3";
package node;

import "script_package.proto";
import "transaction.proto";
import "channel_transaction.proto";
import "google/api/annotations.proto";

service Node {
    rpc OpenChannel (OpenChannelRequest) returns (OpenChannelResponse) {
        option (google.api.http) = {
           post: "/node/open_channel"
           body: "*"
        };
    }

    rpc Pay (PayRequest) returns (PayResponse) {
        option (google.api.http) = {
           post: "/node/pay"
           body: "*"
        };
    }

    rpc Deposit (DepositRequest) returns (DepositResponse) {
        option (google.api.http) = {
           post: "/node/deposit"
           body: "*"
        };
    }

    rpc Withdraw (WithdrawRequest) returns (WithdrawResponse) {
        option (google.api.http) = {
           post: "/node/withdraw"
           body: "*"
        };
    }

    rpc ChannelBalance (ChannelBalanceRequest) returns (ChannelBalanceResponse) {
        option (google.api.http) = {
           post: "/node/channel_balance"
           body: "*"
        };
    }

    rpc InstallChannelScriptPackage (InstallChannelScriptPackageRequest) returns (InstallChannelScriptPackageResponse) {
        option (google.api.http) = {
           post: "/node/install_channel_script_package"
           body: "*"
        };
    }

    rpc DeployModule (DeployModuleRequest) returns (DeployModuleResponse) {
        option (google.api.http) = {
           post: "/node/deploy_module"
           body: "*"
        };
    }

    rpc ExecuteScript (ExecuteScriptRequest) returns (ExecuteScriptResponse) {
        option (google.api.http) = {
           post: "/node/execute_script"
           body: "*"
        };
    }
    rpc QueryTransaction (QueryTransactionQuest) returns (sgtypes.SignedChannelTransaction) {
        option (google.api.http) = {
               post: "/node/query"
               body: "*"
            };
    }

    rpc GetChannelTransactionProposal (ChannelBalanceRequest) returns (GetChannelTransactionProposalResponse) {
        option (google.api.http) = {
           get: "/node/channel_transaction_proposal"
        };
    }

    rpc ChannelTransactionProposal (ChannelTransactionProposalRequest) returns (EmptyResponse) {
        option (google.api.http) = {
           post: "/node/channel_transaction_proposal"
           body: "*"
        };
    }

    rpc AddInvoice (AddInvoiceRequest) returns (AddInvoiceResponse) {
        option (google.api.http) = {
           post: "/node/invoice/add"
           body: "*"
        };
    }

    rpc SendPayment (PaymentRequest) returns (EmptyResponse) {
        option (google.api.http) = {
           get: "/node/payment/send"
        };
    }

}

message QueryTransactionQuest {
     bytes participant_address = 1;
     uint64 channel_seq_number = 2;
}

message OpenChannelRequest {
    bytes remote_addr = 1;
    uint64 local_amount = 2;
    uint64 remote_amount = 3;
}

message OpenChannelResponse {

}

message DepositRequest {
    bytes remote_addr = 1;
    uint64 local_amount = 2;
}

message DepositResponse {

}

message WithdrawRequest {
    bytes remote_addr = 1;
    uint64 local_amount = 2;
}

message WithdrawResponse {

}

message PayRequest {
    bytes remote_addr = 1;
    uint64 amount = 2;
}

message PayResponse {

}

message ChannelBalanceRequest {
    bytes remote_addr = 1;
}

message ChannelBalanceResponse {
    uint64 balance = 1;
}

message InstallChannelScriptPackageRequest {
    sgtypes.ChannelScriptPackage channel_script_package = 1;
}

message InstallChannelScriptPackageResponse {

}

message DeployModuleRequest {
    bytes module_bytes = 1;
}

message DeployModuleResponse {
    types.TransactionWithProof transaction_with_proof = 1;
}

message ExecuteScriptRequest {
    bytes remote_addr = 1;
    string package_name = 2;
    string script_name = 3;
    repeated types.TransactionArgument args = 4;
}

message ExecuteScriptResponse {
    uint64 channel_sequence_number = 1;
}

message GetChannelTransactionProposalResponse{
    sgtypes.ChannelTransaction channel_transaction = 1;
}

message ChannelTransactionProposalRequest{
    bytes participant_address = 1;
    bytes transaction_hash = 2;
    bool approve = 3;
}

message EmptyResponse{

}

message AddInvoiceRequest{
    uint64 amount = 1;
}

message AddInvoiceResponse{
    string encoded_invoice = 1;
}

message PaymentRequest{
    string encoded_invoice = 1;
}